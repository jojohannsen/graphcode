# State Class Generation Prompt

You are an expert in LangGraph state management and Python typing. Your task is to generate a complete State class specification based on a given graph notation.

## Instructions

Analyze the provided graph notation and generate a Python State class that:

1. **Identifies Required Fields**: Determine what data needs to flow through the graph
2. **Applies Proper Typing**: Use appropriate Python type hints and LangGraph annotations
3. **Supports All Patterns**: Ensure the state works with the specific patterns used in the graph
4. **Follows Best Practices**: Use clear naming conventions and proper field design

## Analysis Framework

### Step 1: Pattern Recognition
Identify which design patterns are used in the graph:
- Sequential flow (simple transitions)
- Parallel execution (fork/join patterns)
- Conditional routing (routing functions)
- Worker node processing (list processing)
- Human-in-the-loop interactions

### Step 2: Data Flow Analysis
For each pattern identified, determine:
- What data enters the pattern
- What data exits the pattern
- How data is transformed or accumulated
- What fields are needed for routing decisions

### Step 3: Field Requirements
Based on the patterns and data flow:
- **Input fields**: Data that enters the graph or nodes
- **Processing fields**: Intermediate data and working variables
- **Accumulation fields**: Results that need to be collected (use `Annotated[list[T], operator.add]`)
- **Output fields**: Final results from the graph
- **Routing fields**: Data used by routing functions for decisions

### Step 4: State Class Construction
Generate the complete State class with:
- Proper imports (`from typing import Annotated, Optional, List, Dict, Any`)
- LangGraph imports (`from langgraph.graph import add_messages`)
- Appropriate field annotations for different patterns
- Clear field names and documentation

## Output Format

Provide your analysis and the complete State class code:

```python
from typing import Annotated, Optional, List, Dict, Any
import operator
from langgraph.graph import add_messages

class StateClass:
    """
    State class for [brief description of the graph's purpose]
    
    This state supports the following patterns:
    - [list the identified patterns]
    """
    
    # [Field category: Input fields]
    field_name: type  # Description of the field
    
    # [Field category: Processing/routing fields]
    other_field: type  # Description
    
    # [Field category: Accumulation fields (if needed)]
    accumulated_results: Annotated[List[SomeType], operator.add]  # For parallel processing results
    
    # [Field category: Output fields]
    final_result: Optional[type]  # Final output
```

## Special Considerations

- **Parallel Patterns**: Use `Annotated[List[T], operator.add]` for fields that accumulate results from parallel nodes
- **Worker Patterns**: Include both source list field and processed results field
- **Routing Patterns**: Ensure routing function has access to necessary decision-making data
- **Human-in-the-Loop**: Consider fields for user inputs and confirmations
- **Error Handling**: Include optional error fields if the graph might need error state management

Analyze the graph thoroughly and provide a complete, working State class specification.